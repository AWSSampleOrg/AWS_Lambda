AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: MSK triggered Lambda
Parameters:
  # Project Name Parameter
  ProjectPrefix:
    Type: String
    Default: ""

  VpcId:
    Type: String

  PrivateSubnetAId:
    Type: String
  # PrivateSubnetBId:
  #   Type: String
  PrivateSubnetCId:
    Type: String
  # PrivateSubnetDId:
  #   Type: String

Resources:
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets:
          - !Ref PrivateSubnetAId
          - !Ref PrivateSubnetCId
        InstanceType: kafka.m7g.large
        SecurityGroups:
          - !Ref SecurityGroupForMSK
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      ClusterName: !Sub ${ProjectPrefix}Cluster
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: true
      KafkaVersion: 3.6.0
      # The target number of broker nodes in the cluster must be a multiple of the number of availability zones (AZs) in the client subnets parameter. For example, a cluster with subnets in two AZs must have a target number of nodes that is a multiple of two.
      NumberOfBrokerNodes: 2
      StorageMode: LOCAL

  SecurityGroupForMSK:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectPrefix}SecurityGroupForMSK
      GroupDescription: This is for SecurityGroupForMSK
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # IAM
        - CidrIp: "0.0.0.0/0"
          Description: SecurityGroupForMSK
          FromPort: 9098
          IpProtocol: tcp
          ToPort: 9098
      Tags:
        - Key: Name
          Value: !Sub ${ProjectPrefix}SecurityGroupForMSK

  #-------------------------------------------------------
  # VPC Endpoint
  #-------------------------------------------------------
  STSVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectPrefix}STSVpcEndpointSecurityGroup
      GroupDescription: This is for STSVpcEndpointSecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: STSVpcEndpointSecurityGroup
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${ProjectPrefix}STSVpcEndpointSecurityGroup

  STSVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: "Interface"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetAId
        - !Ref PrivateSubnetCId
      SecurityGroupIds:
        - !Ref STSVpcEndpointSecurityGroup

  LambdaVpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectPrefix}LambdaVpcEndpointSecurityGroup
      GroupDescription: This is for LambdaVpcEndpointSecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: LambdaVpcEndpointSecurityGroup
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${ProjectPrefix}LambdaVpcEndpointSecurityGroup

  LambdaVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.lambda
      VpcId: !Ref VpcId
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetAId
        - !Ref PrivateSubnetCId
      SecurityGroupIds:
        - !Ref LambdaVpcEndpointSecurityGroup

  #-------------------------------------------------------
  # CloudWatch LogGroup
  #-------------------------------------------------------
  TargetLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TargetLambdaFunction}

  #-------------------------------------------------------
  # Lambda
  #-------------------------------------------------------
  TargetLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/lambda_function
      FunctionName: !Sub ${ProjectPrefix}lambda_function
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Sub ${LambdaRole.Arn}
      Runtime: python3.13
      # Max 14 minutes
      # https://docs.aws.amazon.com/lambda/latest/dg/with-msk-process.html
      Timeout: 840
      Tracing: Active
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  # ------------------------------------------------------------#
  # IAM
  # ------------------------------------------------------------#
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kafka-cluster:Connect
                  - kafka-cluster:DescribeGroup
                  - kafka-cluster:AlterGroup
                  - kafka-cluster:DescribeTopic
                  - kafka-cluster:ReadData
                  - kafka-cluster:DescribeClusterDynamicConfiguration
                Resource: "*"
              - Effect: Allow
                Action: logs:*
                Resource: "*"
      RoleName: !Sub ${ProjectPrefix}LambdaRole
