AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SQS triggered Lambda
Parameters:
  ProjectPrefix:
    Type: String
    Default: ""

Resources:
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName: !Sub ${ProjectPrefix}queue
      # To allow your function time to process each batch of records,
      # set the source queue's visibility timeout to at least six times the configuration timeout on your function.
      # The extra time allows Lambda to retry if your function is throttled while processing a previous batch.
      VisibilityTimeout: 60

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !Sub ${Queue.Arn}
      FunctionName: !Sub ${TargetLambdaFunction.Arn}
      MaximumBatchingWindowInSeconds: 0

  #-------------------------------------------------------
  # CloudWatch LogGroup
  #-------------------------------------------------------
  TargetLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TargetLambdaFunction}

  #-------------------------------------------------------
  # Lambda
  #-------------------------------------------------------
  TargetLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/lambda_function
      FunctionName: !Sub ${ProjectPrefix}lambda_function
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Sub ${LambdaRole.Arn}
      Runtime: python3.13
      Timeout: 10
      Tracing: Active
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  # ------------------------------------------------------------#
  # IAM
  # ------------------------------------------------------------#
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /
      RoleName: !Sub ${ProjectPrefix}LambdaRole
